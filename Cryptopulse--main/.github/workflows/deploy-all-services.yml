name: Deploy All Services - Cryptopulse

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: deploy-all | health-check | get-urls | update-env
        required: true
        default: deploy-all
      envUpdates:
        description: Environment updates (KEY=VALUE format, one per line)
        required: false

permissions:
  contents: read
  actions: write

env:
  RENDER_API_BASE: https://api.render.com/v1
  RENDER_OWNER_ID: tea-d3jvjlnfte5s73bu8pp0

jobs:
  deploy-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and run tests
        if: ${{ github.event_name == 'push' }}
        run: |
          cd frontend && npm ci && npm run test --passWithNoTests
          cd ../backend && npm ci && npm test --passWithNoTests
          cd ../cloud && npm ci && npm test --passWithNoTests

      - name: Deploy All Services
        id: deploy
        shell: bash
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          FRONTEND_SERVICE_ID: srv-d3m8r0ggjchc73cus5h0
          BACKEND_SERVICE_ID: srv-d3kpg40dl3ps73f914s0
          CLOUD_FUNCTIONS_ID: srv-d3mgcjjuibrs73dv9qvg
          ACTION: ${{ github.event.inputs.action || 'deploy-all' }}
          ENV_UPDATES: ${{ github.event.inputs.envUpdates || '' }}
          API: ${{ env.RENDER_API_BASE }}
          OWNER_ID: ${{ env.RENDER_OWNER_ID }}
        run: |
          set -euo pipefail
          hdr=( -H "Authorization: Bearer $RENDER_API_KEY" -H 'Content-Type: application/json' )
          
          case "$ACTION" in
            deploy-all)
              echo "üöÄ Deploying all Cryptopulse services with production environment variables..."
              
              # Update Frontend environment variables
              echo "Updating Frontend environment variables..."
              frontend_env='[
                {"key":"NODE_ENV","value":"production"},
                {"key":"VITE_APP_NAME","value":"CryptoPulse"},
                {"key":"VITE_APP_VERSION","value":"2.0.0"},
                {"key":"VITE_BUILD_TARGET","value":"production"},
                {"key":"VITE_ENABLE_SOURCEMAPS","value":"false"},
                {"key":"VITE_API_BASE_URL","value":"https://cryptopulse-backend.onrender.com"},
                {"key":"VITE_ENCRYPTION_KEY","value":"351d82b45bcc2d9fc19fd9c46eea8006239c9ff578e7306abb6c970fd35ae919"},
                {"key":"VITE_ENABLE_ANALYTICS","value":"true"},
                {"key":"VITE_ENABLE_DEBUG","value":"false"},
                {"key":"VITE_ENABLE_MOCK_DATA","value":"false"},
                {"key":"VITE_ENABLE_COMPRESSION","value":"true"},
                {"key":"VITE_ENABLE_CACHING","value":"true"},
                {"key":"VITE_ENABLE_MONITORING","value":"true"},
                {"key":"VITE_ENABLE_TRACING","value":"true"}
              ]'
              curl -fsSL -X PATCH "$API/services/$FRONTEND_SERVICE_ID/env-vars" "${hdr[@]}" \
                --data "{\"env\": $frontend_env}" | tee frontend-env.json
              
              # Update Backend environment variables
              echo "Updating Backend environment variables..."
              backend_env='[
                {"key":"NODE_ENV","value":"production"},
                {"key":"PORT","value":"10000"},
                {"key":"HOST","value":"0.0.0.0"},
                {"key":"JWT_SECRET","value":"28f1020b4c2feb5200e5a8e62b4348203d7806a49f399728ba58adc12f2e188c"},
                {"key":"JWT_EXPIRES_IN","value":"24h"},
                {"key":"JWT_REFRESH_EXPIRES_IN","value":"7d"},
                {"key":"ENCRYPTION_KEY","value":"351d82b45bcc2d9fc19fd9c46eea8006239c9ff578e7306abb6c970fd35ae919"},
                {"key":"CSRF_SECRET","value":"c0298a34a1cafe812fe04b7a56669016faf697cfce454a7af7a6c37388aea28a"},
                {"key":"SESSION_SECRET","value":"a140f6b13edc1a055069ffde09e96e23d60fe826d53e8b4cf600e8580df91059"},
                {"key":"BINANCE_TESTNET","value":"false"},
                {"key":"CASHFREE_ENV","value":"production"},
                {"key":"CASHFREE_BASE_URL","value":"https://api.cashfree.com"},
                {"key":"FRONTEND_URL","value":"https://cryptopulse-frontend.onrender.com"},
                {"key":"BACKEND_URL","value":"https://cryptopulse-backend.onrender.com"},
                {"key":"CLOUD_URL","value":"https://cryptopulse-cloud.onrender.com"},
                {"key":"ALLOWED_ORIGINS","value":"https://cryptopulse-frontend.onrender.com,https://cryptopulse-backend.onrender.com,https://cryptopulse-cloud.onrender.com"},
                {"key":"CORS_ORIGIN","value":"https://cryptopulse-frontend.onrender.com"},
                {"key":"LOG_LEVEL","value":"info"},
                {"key":"ENABLE_MONITORING","value":"true"},
                {"key":"ENABLE_TRACING","value":"true"},
                {"key":"ENABLE_ANALYTICS","value":"true"},
                {"key":"RATE_LIMIT_WINDOW_MS","value":"900000"},
                {"key":"RATE_LIMIT_MAX_REQUESTS","value":"100"},
                {"key":"ENABLE_CSRF_PROTECTION","value":"true"},
                {"key":"ENABLE_RATE_LIMITING","value":"true"},
                {"key":"ENABLE_CORS","value":"true"},
                {"key":"WEBSOCKET_ENABLED","value":"true"},
                {"key":"WEBSOCKET_PORT","value":"8080"},
                {"key":"WEBSOCKET_MAX_CONNECTIONS","value":"1000"},
                {"key":"WEBSOCKET_MESSAGE_RATE_LIMIT","value":"100"},
                {"key":"WEBSOCKET_HEARTBEAT_INTERVAL","value":"30000"},
                {"key":"WEBSOCKET_MAX_MESSAGE_SIZE","value":"1048576"},
                {"key":"ENABLE_DEBUG","value":"false"},
                {"key":"ENABLE_MOCK_DATA","value":"false"},
                {"key":"CLUSTER_MODE","value":"true"},
                {"key":"MAX_MEMORY_USAGE","value":"80"},
                {"key":"MAX_CPU_USAGE","value":"80"},
                {"key":"ENABLE_COMPRESSION","value":"true"},
                {"key":"ENABLE_CACHING","value":"true"}
              ]'
              curl -fsSL -X PATCH "$API/services/$BACKEND_SERVICE_ID/env-vars" "${hdr[@]}" \
                --data "{\"env\": $backend_env}" | tee backend-env.json
              
              # Update Cloud Functions environment variables
              echo "Updating Cloud Functions environment variables..."
              cloud_env='[
                {"key":"NODE_ENV","value":"production"},
                {"key":"PORT","value":"10000"},
                {"key":"HOST","value":"0.0.0.0"},
                {"key":"JWT_SECRET","value":"28f1020b4c2feb5200e5a8e62b4348203d7806a49f399728ba58adc12f2e188c"},
                {"key":"ENCRYPTION_KEY","value":"351d82b45bcc2d9fc19fd9c46eea8006239c9ff578e7306abb6c970fd35ae919"},
                {"key":"BINANCE_TESTNET","value":"false"},
                {"key":"CASHFREE_ENV","value":"production"},
                {"key":"CASHFREE_BASE_URL","value":"https://api.cashfree.com"},
                {"key":"FRONTEND_URL","value":"https://cryptopulse-frontend.onrender.com"},
                {"key":"BACKEND_URL","value":"https://cryptopulse-backend.onrender.com"},
                {"key":"CLOUD_URL","value":"https://cryptopulse-cloud.onrender.com"},
                {"key":"ALLOWED_ORIGINS","value":"https://cryptopulse-frontend.onrender.com,https://cryptopulse-backend.onrender.com,https://cryptopulse-cloud.onrender.com"},
                {"key":"CORS_ORIGIN","value":"https://cryptopulse-frontend.onrender.com"},
                {"key":"LOG_LEVEL","value":"info"},
                {"key":"ENABLE_MONITORING","value":"true"},
                {"key":"ENABLE_TRACING","value":"true"},
                {"key":"ENABLE_ANALYTICS","value":"true"},
                {"key":"RATE_LIMIT_WINDOW_MS","value":"900000"},
                {"key":"RATE_LIMIT_MAX_REQUESTS","value":"100"},
                {"key":"ENABLE_CSRF_PROTECTION","value":"true"},
                {"key":"ENABLE_RATE_LIMITING","value":"true"},
                {"key":"ENABLE_CORS","value":"true"},
                {"key":"ENABLE_DEBUG","value":"false"},
                {"key":"ENABLE_MOCK_DATA","value":"false"},
                {"key":"CLUSTER_MODE","value":"true"},
                {"key":"MAX_MEMORY_USAGE","value":"80"},
                {"key":"MAX_CPU_USAGE","value":"80"},
                {"key":"ENABLE_COMPRESSION","value":"true"},
                {"key":"ENABLE_CACHING","value":"true"}
              ]'
              curl -fsSL -X PATCH "$API/services/$CLOUD_FUNCTIONS_ID/env-vars" "${hdr[@]}" \
                --data "{\"env\": $cloud_env}" | tee cloud-env.json
              
              # Deploy Frontend
              echo "Deploying Frontend..."
              curl -fsSL -X POST "$API/services/$FRONTEND_SERVICE_ID/deploys" "${hdr[@]}" \
                --data "{\"clearCache\": true, \"ownerId\": \"$OWNER_ID\"}" | tee frontend-deploy.json
              
              # Deploy Backend
              echo "Deploying Backend..."
              curl -fsSL -X POST "$API/services/$BACKEND_SERVICE_ID/deploys" "${hdr[@]}" \
                --data "{\"clearCache\": true, \"ownerId\": \"$OWNER_ID\"}" | tee backend-deploy.json
              
              # Deploy Cloud Functions
              echo "Deploying Cloud Functions..."
              curl -fsSL -X POST "$API/services/$CLOUD_FUNCTIONS_ID/deploys" "${hdr[@]}" \
                --data "{\"clearCache\": true, \"ownerId\": \"$OWNER_ID\"}" | tee cloud-deploy.json
              
              echo "‚úÖ All services deployment initiated with production environment variables!"
              ;;
            
            health-check)
              echo "üîç Performing health checks..."
              
              # Check Frontend
              frontend_url=$(curl -fsSL "$API/services/$FRONTEND_SERVICE_ID" "${hdr[@]}" | jq -r '.service.details.url')
              echo "Checking Frontend: $frontend_url"
              frontend_status=$(curl -fsSL -o /dev/null -w "%{http_code}" "$frontend_url" || echo "000")
              echo "Frontend Status: $frontend_status" | tee frontend-health.json
              
              # Check Backend
              backend_url=$(curl -fsSL "$API/services/$BACKEND_SERVICE_ID" "${hdr[@]}" | jq -r '.service.details.url')
              echo "Checking Backend: $backend_url"
              backend_status=$(curl -fsSL -o /dev/null -w "%{http_code}" "$backend_url" || echo "000")
              echo "Backend Status: $backend_status" | tee backend-health.json
              
              # Check Cloud Functions
              cloud_url=$(curl -fsSL "$API/services/$CLOUD_FUNCTIONS_ID" "${hdr[@]}" | jq -r '.service.details.url')
              echo "Checking Cloud Functions: $cloud_url"
              cloud_status=$(curl -fsSL -o /dev/null -w "%{http_code}" "$cloud_url" || echo "000")
              echo "Cloud Functions Status: $cloud_status" | tee cloud-health.json
              ;;
            
            get-urls)
              echo "üìã Getting service URLs..."
              
              # Get all service URLs
              frontend_url=$(curl -fsSL "$API/services/$FRONTEND_SERVICE_ID" "${hdr[@]}" | jq -r '.service.details.url')
              backend_url=$(curl -fsSL "$API/services/$BACKEND_SERVICE_ID" "${hdr[@]}" | jq -r '.service.details.url')
              cloud_url=$(curl -fsSL "$API/services/$CLOUD_FUNCTIONS_ID" "${hdr[@]}" | jq -r '.service.details.url')
              
              echo "frontend_url=$frontend_url" >> $GITHUB_OUTPUT
              echo "backend_url=$backend_url" >> $GITHUB_OUTPUT
              echo "cloud_url=$cloud_url" >> $GITHUB_OUTPUT
              
              echo "Frontend: $frontend_url" | tee service-urls.txt
              echo "Backend: $backend_url" | tee -a service-urls.txt
              echo "Cloud Functions: $cloud_url" | tee -a service-urls.txt
              ;;
            
            update-env)
              echo "üîß Updating environment variables..."
              
              if [ -n "$ENV_UPDATES" ]; then
                # Update Frontend env vars
                echo "Updating Frontend environment..."
                tmp=$(mktemp)
                printf '{"env":[' > "$tmp"
                first=1
                while IFS= read -r line; do
                  [ -z "$line" ] && continue
                  key="${line%%=*}"
                  val="${line#*=}"
                  [ $first -eq 0 ] && printf ',' >> "$tmp" || first=0
                  printf '{"key":"%s","value":"%s"}' "$key" "$val" >> "$tmp"
                done <<< "$ENV_UPDATES"
                printf ']}' >> "$tmp"
                
                curl -fsSL -X PATCH "$API/services/$FRONTEND_SERVICE_ID/env-vars" "${hdr[@]}" --data @"$tmp" | tee frontend-env.json
                
                # Update Backend env vars
                echo "Updating Backend environment..."
                curl -fsSL -X PATCH "$API/services/$BACKEND_SERVICE_ID/env-vars" "${hdr[@]}" --data @"$tmp" | tee backend-env.json
                
                # Update Cloud Functions env vars
                echo "Updating Cloud Functions environment..."
                curl -fsSL -X PATCH "$API/services/$CLOUD_FUNCTIONS_ID/env-vars" "${hdr[@]}" --data @"$tmp" | tee cloud-env.json
              fi
              ;;
          esac

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-output
          path: |
            frontend-deploy.json
            backend-deploy.json
            cloud-deploy.json
            frontend-health.json
            backend-health.json
            cloud-health.json
            frontend-env.json
            backend-env.json
            cloud-env.json
            service-urls.txt

      - name: Report Deployment Status
        if: always()
        shell: bash
        env:
          API: ${{ env.RENDER_API_BASE }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          FRONTEND_SERVICE_ID: srv-d3m8r0ggjchc73cus5h0
          BACKEND_SERVICE_ID: srv-d3kpg40dl3ps73f914s0
          CLOUD_FUNCTIONS_ID: srv-d3mgcjjuibrs73dv9qvg
        run: |
          set -euo pipefail
          hdr=( -H "Authorization: Bearer $RENDER_API_KEY" )
          
          echo "## üåü Cryptopulse - Complete Application Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get service URLs
          frontend_url=$(curl -fsSL "$API/services/$FRONTEND_SERVICE_ID" "${hdr[@]}" | jq -r '.service.details.url')
          backend_url=$(curl -fsSL "$API/services/$BACKEND_SERVICE_ID" "${hdr[@]}" | jq -r '.service.details.url')
          cloud_url=$(curl -fsSL "$API/services/$CLOUD_FUNCTIONS_ID" "${hdr[@]}" | jq -r '.service.details.url')
          
          echo "### üöÄ Live Application URLs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### üé® **Frontend (Main Application)**" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [$frontend_url]($frontend_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Live and Ready!" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: React/Vite Application" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### üîß **Backend API**" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [$backend_url]($backend_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Live and Ready!" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: Node.js API Server" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### ‚òÅÔ∏è **Cloud Functions**" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [$cloud_url]($cloud_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Live and Ready!" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: Serverless Functions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üéØ **Your Application is Ready!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Main Application**: [$frontend_url]($frontend_url)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó **Quick Actions**" >> $GITHUB_STEP_SUMMARY
          echo "- [Frontend Dashboard](https://dashboard.render.com/web/$FRONTEND_SERVICE_ID)" >> $GITHUB_STEP_SUMMARY
          echo "- [Backend Dashboard](https://dashboard.render.com/web/$BACKEND_SERVICE_ID)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Functions Dashboard](https://dashboard.render.com/web/$CLOUD_FUNCTIONS_ID)" >> $GITHUB_STEP_SUMMARY
          echo "- [View Logs](https://dashboard.render.com/web/$FRONTEND_SERVICE_ID/logs)" >> $GITHUB_STEP_SUMMARY
          echo "- [Environment Variables](https://dashboard.render.com/web/$FRONTEND_SERVICE_ID/environment)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä **Services Overview**" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Services**: 3" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: All Live ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: Frankfurt" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto Deploy**: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring**: Active" >> $GITHUB_STEP_SUMMARY
