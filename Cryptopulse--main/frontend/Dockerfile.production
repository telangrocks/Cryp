# =============================================================================
# CryptoPulse Frontend Production Dockerfile - 100% Production Ready
# =============================================================================
# Multi-stage production Dockerfile with security and performance optimizations
# Author: Shrikant Telang
# License: MIT

# =========================================================================
# Base Stage - Common dependencies and setup
# =========================================================================
FROM node:20-alpine AS base

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone to UTC
ENV TZ=UTC

# =========================================================================
# Dependencies Stage - Install dependencies
# =========================================================================
FROM base AS dependencies

# Copy package files and pnpm config
COPY package*.json .npmrc ./

# Install pnpm globally (version locked for consistency)
RUN npm install -g pnpm@10.18.0

# Install all dependencies (including devDependencies for build)
RUN pnpm install --production=false --shamefully-hoist

# =========================================================================
# Build Stage - Build React application
# =========================================================================
FROM dependencies AS build

# Build-time env (Vite reads VITE_* at build). Render will inject
# service envs into docker build; declare ARG to pick them up.
ARG VITE_API_BASE_URL
ARG VITE_APP_NAME
ARG VITE_APP_VERSION
ARG VITE_BUILD_TARGET=production
ARG VITE_ENABLE_SOURCEMAPS=false
ARG VITE_ENCRYPTION_KEY
ARG NODE_ENV=production

# Expose as ENV so tools invoked during build can access them
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_APP_NAME=${VITE_APP_NAME}
ENV VITE_APP_VERSION=${VITE_APP_VERSION}
ENV VITE_BUILD_TARGET=${VITE_BUILD_TARGET}
ENV VITE_ENABLE_SOURCEMAPS=${VITE_ENABLE_SOURCEMAPS}
ENV VITE_ENCRYPTION_KEY=${VITE_ENCRYPTION_KEY}
ENV NODE_ENV=${NODE_ENV}

# Copy source code
COPY . .

# Build application with production optimizations
RUN pnpm run build

# =========================================================================
# Production Stage - Nginx for serving static files
# =========================================================================
FROM nginx:alpine AS production

# Install additional tools and dumb-init for proper signal handling
RUN apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=UTC

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Create a production-specific Dockerfile name
# This file should be renamed to Dockerfile.production for consistency

# Create necessary nginx directories with proper permissions
RUN mkdir -p /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /var/run/nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /etc/nginx/conf.d \
    && chown -R nginx:nginx /var/run/nginx \
    && chmod -R 755 /var/cache/nginx \
    && chmod -R 755 /var/run/nginx

# Switch to non-root user for security
USER nginx

# Expose port 80 for HTTP traffic
EXPOSE 80

# Health check to ensure service is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["nginx", "-g", "daemon off;"]
